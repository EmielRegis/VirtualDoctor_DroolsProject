package com.sample;

global QuestionCommunicator questionCommunicator;


import org.drools.marshalling.impl.ProtobufMessages

rule "Init"
    when
    then
        System.out.println("Inicjalizuję...");
        insert (new DiagnosisFact("isOverEightenn", questionCommunicator.createQuestion("Czy jesteś osobą dorosłą?")));
		insert (new DiagnosisFact ("isSex", questionCommunicator.createSelectOptionQuestion("Twoja płeć to:", new String[] {"mężczyzna", "kobieta"})));
        String[] compoundAnswer = questionCommunicator.createSelectOptionsQuestion("Czy boli Cię:", new String[] {"klatka piersiowa", "brzuch", "głowa"});
		for(String ans : compoundAnswer.clone()) {
			insert(ans);
		}
end

rule "End"
	salience(10000000)
	when dbl : Double()
	then
		drools.halt();
	end

rule "Chest"
	salience(1000)
	when s: String(s == "klatka piersiowa")
	then
		insert (new DiagnosisFact("isChestPain", true));
end

rule "Stomach"
	salience(1000)
	when s: String(s == "brzuch")
	then
		insert (new DiagnosisFact("isStomachPain", true));
end

rule "Head"
	salience(1000)
	when s: String(s == "głowa")
	then
		insert (new DiagnosisFact("isHeadAche", true));
end


rule "ChestQuestion"
    when 
    	 d : DiagnosisFact(d.name.equals("isChestPain"), d.status == Question.TRUE)
    	 not (exists DiagnosisFact(name.equals("isChestQuestions")))
    then
    	insert (new DiagnosisFact("isChestQuestions"));
    	String[] compoundAnswer = questionCommunicator.createSelectOptionsQuestion(
    	"Które z wymienionych objawów dotyczą Ciebie?", new String[] {"uczucie duszności", "przyspieszony oddech",
    	 "złe ciśnienie tętnicze"});
		for(String ans : compoundAnswer.clone()) {
			insert(ans);
		}
    end
    
rule "StomachQuestion"
    when
    	 d : DiagnosisFact(d.name.equals("isStomachPain"), d.status == Question.TRUE)
    	 not (exists DiagnosisFact(name.equals("isStomachQuestions")))
    then
    	insert (new DiagnosisFact("isStomachQuestions"));
    	String ans = questionCommunicator.createSelectOptionQuestion(
    	"Sprecyzuj miejsce bólu.", new String[] {"podbrzusze", "okolice pępka"});
		insert(ans);		
    end
    
rule "HeadAcheQuestion"
    when 
   	 	 d : DiagnosisFact(d.name.equals("isHeadAche"), d.status == Question.TRUE)
    	 not (exists DiagnosisFact(name.equals("isHeadAcheQuestions")))
    then
    	insert (new DiagnosisFact("isHeadAcheQuestions"));
    	String[] compoundAnswer = questionCommunicator.createSelectOptionsQuestion(
    	"Które z wymienionych objawów dotyczą Ciebie?", new String[] {"ból zatok", "problemy ze słuchem",
    	 "złe ciśnienie tętnicze", "problemy ze wzrokiem", "migrena" });
		for(String ans : compoundAnswer.clone()) {
			insert(ans);
		}
    end

rule "Stuffiness"
    when s : String(s == "uczucie duszności")
    then
        insert (new DiagnosisFact("isStuffiness", true));
    end

rule "SteppedUpBreath"
    when s : String(s == "przyspieszony oddech")
    then
        insert (new DiagnosisFact("isSteppedUpBreath", true));
    end

rule "BloodPressure"
    when s : String(s == "złe ciśnienie tętnicze")
    then
        insert (new DiagnosisFact("isBloodPresure", true));
    end

rule "Abdomen"
    when s : String(s == "podbrzusze")
    then
        insert (new DiagnosisFact("isAbdomen", true));
    end
    
rule "Navel"
    when s : String(s == "okolice pępka")
    then
        insert (new DiagnosisFact("isNavel", true));
    end
    
rule "SinusesAche"
    when s : String(s == "ból zatok")
    then
        insert (new DiagnosisFact("isSinusesAche", true));
    end
    
rule "EarsAche"
    when s : String(s == "problemy ze słuchem")
    then
        insert (new DiagnosisFact("isEarsAche", true));
    end 

rule "Eyesight"
    when s : String(s == "problemy ze wzrokiem")
    then
        insert (new DiagnosisFact("isEyesight", true));
    end    

rule "Migraine"
    when s : String(s == "migrena")
    then
        insert (new DiagnosisFact("isMigraine", true));
    end    
        
rule "StuffinessAfterSports"
    when 
    	d : DiagnosisFact(d.name.equals("isStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isSportStuffiness")))
    then
    	insert (new DiagnosisFact("isSportStuffiness", questionCommunicator.createQuestion("Czy problemy z dusznością nasilają przy wysiłku fizycznym?")));
    end 
    
rule "LongLastingCold"
    when 
    	d : DiagnosisFact(d.name.equals("isStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isLongLastingCold")))
    then
    	insert (new DiagnosisFact("isLongLastingCold", questionCommunicator.createQuestion("Czy masz długotrwały katar i często kichasz?")));
    end
    
rule "LongLastingColdCough"
    when 
    	d : DiagnosisFact(d.name.equals("isLongLastingCold"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isCough")))
    then
    	insert (new DiagnosisFact("isCough", questionCommunicator.createQuestion("Czy masz długotrwały kaszel?")));
    end
    
rule "LongLastingColdAsthma"
    when 
    	d : DiagnosisFact(d.name.equals("isLongLastingCold"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isAsthma")))
    then
    	insert (new DiagnosisFact("isAsthma", questionCommunicator.createQuestion("Czy masz astmę?")));
    end

rule "LongLastingColdPneumoniaOrBronchitis"
    when 
    	d : DiagnosisFact(d.name.equals("isLongLastingCold"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isPneumoniaOrBronchitis")))
    then
    	insert (new DiagnosisFact("isPneumoniaOrBronchitis", questionCommunicator.createQuestion("Czy przechodziłeś ostatnio zapalenie płuc lub oskrzeli?")));
    end
    
rule "LongLastingColdStingingEyes"
    when 
    	d : DiagnosisFact(d.name.equals("isLongLastingCold"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isStingingEyes")))
    then
        	insert (new DiagnosisFact("isStingingEyes", questionCommunicator.createQuestion("Czy często odczuwasz pieczenie oczu?")));
    end
    
rule "LongLastingColdRash"
    when 
    	d : DiagnosisFact(d.name.equals("isLongLastingCold"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isRash")))
    then
        	insert (new DiagnosisFact("isRash", questionCommunicator.createQuestion("Czy miewasz wysypki?")));

    end

rule "RashAlergologist"
    when d : DiagnosisFact(d.name.equals("isRash"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u alergologa");
       drools.halt();
    end
    
rule "StingingEyesAlergologist"
    when d : DiagnosisFact(d.name.equals("isStingingEyes"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u alergologa");
       drools.halt();
    end
    
rule "StufinessCough"
    when 
    	d : DiagnosisFact(d.name.equals("isSportStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isCough")))
    then
        	insert (new DiagnosisFact("isCough", questionCommunicator.createQuestion("Czy masz długotrwały kaszel?")));
    end
    
rule "StufinessAsthma"
    when 
    	d : DiagnosisFact(d.name.equals("isSportStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isAsthma")))
    then
        	insert (new DiagnosisFact("isAthma", questionCommunicator.createQuestion("Czy masz astmę?")));
    end

rule "StufinessPneumoniaOrBronchitis"
    when 
    	d : DiagnosisFact(d.name.equals("isSportStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isPneumoniaOrBronchitis")))
    then
        	insert (new DiagnosisFact("isPneumoniaOrBronchitis", questionCommunicator.createQuestion("Czy przechodziłeś ostatnio zapalenie płuc lub oskrzeli?")));
    end
    
rule "PneumoniaOrBronchitisPulmonologist"
    when d : DiagnosisFact(d.name.equals("isPneumoniaOrBronchitis"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u pulmonologa");
       drools.halt();
    end
            
rule "CoughPulmonologist"
    when d : DiagnosisFact(d.name.equals("isCough"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u pulmonologa");
       drools.halt();
    end

rule "AsthmaPulmonologist"
    when d : DiagnosisFact(d.name.equals("isAsthma"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u pulmonologa");
       drools.halt();
    end

rule "StuffinessStrongEmotions"
    when 
    	d : DiagnosisFact(d.name.equals("isSportStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isStrongEmotions")))
    then
    	insert (new DiagnosisFact("isStrongEmotions", questionCommunicator.createQuestion("Czy cierpisz na ból w klatce podczas odczuwania silnych emocji?")));
    end      

rule "StuffinessHeartPalpiatation"
    when 
    	d : DiagnosisFact(d.name.equals("isSportStuffiness"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isHeartPalpitation")))
    then
    	insert (new DiagnosisFact("isHeartPalipation", questionCommunicator.createQuestion("Czy odczuwasz kołatanie serca?")));
    end
    
rule "StronEmotionsCardiologist"
    when d : DiagnosisFact(d.name.equals("isStrongEmotions"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u kardiologa");
       drools.halt();
    end

rule "HeartPalpitationcardiologist"
    when d : DiagnosisFact(d.name.equals("isHeartPalpitation"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u kardiologa");
       drools.halt();
    end
      
rule "BloodPressureStrongEmotions"
    when 
    	d : DiagnosisFact(d.name.equals("isBloodPressure"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isStrongEmotions")))
    then
    	insert (new DiagnosisFact("isStrongEmotions", questionCommunicator.createQuestion("Czy cierpisz na ból w klatce podczas odczuwania silnych emocji?")));
    end      

rule "BloodPressureHeartPalpiatation"
    when 
    	d : DiagnosisFact(d.name.equals("isBloodPressure"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isHeartPalpitation")))
    then
    	insert (new DiagnosisFact("isHeartPalpitation", questionCommunicator.createQuestion("Czy odczuwasz kołatanie serca?")));
    end
    
rule "SteppedUpBreathStrongEmotions"
    when 
    	d : DiagnosisFact(d.name.equals("isSteppedUpBreath"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isStrongEmotions")))
    then
    	insert (new DiagnosisFact("isStrongEmotions", questionCommunicator.createQuestion("Czy cierpisz na ból w klatce podczas odczuwania silnych emocji?")));
    end      

rule "SteppedUpBreathHeartPalpiatation"
    when 
    	d : DiagnosisFact(d.name.equals("isSteppedUpBreath"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isHeartPalipation")))
    then
    	insert (new DiagnosisFact("isHeartPalpitation", questionCommunicator.createQuestion("Czy odczuwasz kołatanie serca?")));
    end
    
rule "SteppedUpBreathAsthma"
    when 
    	d : DiagnosisFact(d.name.equals("isSteppedUpBreath"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isAsthma")))
    then
    	insert (new DiagnosisFact("isAsthma", questionCommunicator.createQuestion("Czy masz astmę?")));
    end

rule "SteppedUpBreathPneumoniaOrBronchitis"
    when 
    	d : DiagnosisFact(d.name.equals("isSteppedUpBreath"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isPneumoniaOrBronchitis")))
    then
    	insert (new DiagnosisFact("isPneumoniaOrBronchitis", questionCommunicator.createQuestion("Czy przechodziłeś ostatnio zapalenie płuc lub oskrzeli?")));
    end
    
rule "SteppedUpBreathCough"
    when 
    	d : DiagnosisFact(d.name.equals("isSteppedUpBreath"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isCough")))
    then
    	insert (new DiagnosisFact("isCough", questionCommunicator.createQuestion("Czy masz długotrwały kaszel?")));
    end
    
rule "NavelNausea"
	when 
    	d : DiagnosisFact(d.name.equals("isNavel"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isNausea")))
    then
    	insert (new DiagnosisFact("isNausea", questionCommunicator.createQuestion("Czy masz nudności?") ));
    end
    
rule "NavelMeal"
	when 
    	d : DiagnosisFact(d.name.equals("isNavel"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isMeal")))
    then
    	insert (new DiagnosisFact("isMeal", questionCommunicator.createQuestion("Czy ból związany jest z posiłkami?")));
    end

rule "NauseaGastrologist"
    when d : DiagnosisFact(d.name.equals("isNausea"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u gastrologa");
       drools.halt();
    end    

rule "MealGastrologist"
    when d : DiagnosisFact(d.name.equals("isMeal"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u gastrologa");
       drools.halt();
    end    

rule "NavelSoreThroat"
	when 
    	d : DiagnosisFact(d.name.equals("isNavel"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isSoreThroat")))
    then
    	insert (new DiagnosisFact("isSoreThroat", questionCommunicator.createQuestion("Czy odczuwasz ból gardła?")));
    end  
    
rule "SoreThroatPhysician"
    when 
    	d : DiagnosisFact(d.name.equals("isSoreThroat"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isOverEighteen"), status == Question.FALSE))
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u pediatry");
       drools.halt();
    end  
    
rule "AbdomenVoiding"
	when 
    	d : DiagnosisFact(d.name.equals("isAbdomen"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isVoiding")))
    then
    	insert (new DiagnosisFact("isVoiding", questionCommunicator.createQuestion("Czy masz problemy z mikcją?") ));
    end
    
rule "AbdomenRadiatingPain"
	when 
    	d : DiagnosisFact(d.name.equals("isAbdomen"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isRadiatingPain")))
    then
    	 insert (new DiagnosisFact("isRadiatingPain", questionCommunicator.createQuestion("Czy ból ma charakter promieniujący?")));
    end
    
rule "RadiatingPainUrologist"
    when
    	d1 : DiagnosisFact(d1.name.equals("isRadiatingPain"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d1.name.equals("isVoiding"), d2.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u urologa");
       drools.halt();
    end  
    
rule "VoidingUrologist"
    when d : DiagnosisFact(d.name.equals("isVoiding"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u urologa");
       drools.halt();
    end 

rule "AbdomenGenialTractBleeding"
	when 
    	d1 : DiagnosisFact(d1.name.equals("isAbdomen"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d2.name.equals("isSex"), d2.expansion.equals("kobieta"))
    	not (exists DiagnosisFact(name.equals("isGenialTracktBleeding")))
    then
    	insert (new DiagnosisFact("isGenialTrackBleeding", questionCommunicator.createQuestion("Czy pojawiają się patologiczne krwawienia z dróg rodnych?")));
    end
    
rule "AbdomenMenstrualCycleDisorder"
	when 
    	d1 : DiagnosisFact(d1.name.equals("isAbdomen"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d2.name.equals("isSex"), d2.expansion.equals("kobieta"))
    	not (exists DiagnosisFact(name.equals("isMenstrualCycleDisorder")))
    then
    	insert (new DiagnosisFact("isMenstrualCycleDisorder", questionCommunicator.createQuestion("Czy pojawiają się zaburzenia cyklu miesiączkowego?")));
    end
    
rule "MenstrualCycleDisorderGynecologist"
    when d : DiagnosisFact(d.name.equals("isMenstrualCycleDisorder"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u ginekologa");
       drools.halt();
    end 

rule "GenialTractBleedingGynecologist"
    when d : DiagnosisFact(d.name.equals("isGenialTractBleeding"), d.status == Question.TRUE)
    then
       questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u ginekologa");
       drools.halt();
    end 
    
rule "SinusesAcheLongLastingCold"
    when 
    	d : DiagnosisFact(d.name.equals("isSunusesAche"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isLongLastingCold")))
    then
    	insert (new DiagnosisFact("isLongLastingCold", questionCommunicator.createQuestion("Czy masz długotrwały katar i często kichasz?")));
    end
    
rule "SinusesAcheSoreThroat"
    when 
    	d : DiagnosisFact(d.name.equals("isSunusesAche"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isSoreThroat")))
    then
    	insert (new DiagnosisFact("isSoreThroat", questionCommunicator.createQuestion("Czy odczuwasz ból gardła?")));
    end
    
rule "EarsAcheBlockedUpEars"
    when 
    	d : DiagnosisFact(d.name.equals("isEarsAche"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isBlockedUpEars")))
    then
    	insert (new DiagnosisFact("isBlockedUpEars", questionCommunicator.createQuestion("Czy czujesz, że Twoje uszy się zapychają?")));
    end
    
rule "EarsAcheSoreThroat"
    when 
    	d : DiagnosisFact(d.name.equals("isEarsAche"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isSoreThroat")))
    then
    	insert (new DiagnosisFact("isSoreThroat", questionCommunicator.createQuestion("Czy odczuwasz ból gardła?")));
    end
    
rule "SinusesAcheLongLastingColdEarAcheLaryngologist"
    when 
    	d1 : DiagnosisFact(d1.name.equals("isLongLastingCold"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d2.name.equals("isEarsAche"), d2.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u laryngologa");
        drools.halt();
    end
rule "SinueseAcheLongLastingColdSoreThroatLaryngologist"
    when
    	d1 : DiagnosisFact(d1.name.equals("isLongLastingCold"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d2.name.equals("isSoreThroat"), d2.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u laryngologa");
        drools.halt();
    end
rule "SinueseAcheEarAcheSoreThroatLaryngologist"
    when
    	d1 : DiagnosisFact(d1.name.equals("isEarsAche"), d1.status == Question.TRUE)
    	d2 : DiagnosisFact(d2.name.equals("isSoreThroat"), d2.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u laryngologa");
        drools.halt();
    end
    
rule "BlockedUpEarsLaryngologist"
    when d : DiagnosisFact(d.name.equals("isBlockedUpEars"), d.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u laryngologa");
        drools.halt();
    end

rule "BloodPressureNeuralgia"
    when 
    	d : DiagnosisFact(d.name.equals("isBloodPressure"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isNeuralgia")))
    then
    	insert (new DiagnosisFact("isNauralgia", questionCommunicator.createQuestion("Czy odczuwasz nerwobóle?")));
    end 
    
rule "MigraineNeuralgia"
    when 
    	d : DiagnosisFact(d.name.equals("isMigraine"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isNeuralgia")))
    then
    	insert (new DiagnosisFact("isneuralgia", questionCommunicator.createQuestion("Czy odczuwasz nerwobóle?")));
    end 
    
rule "BloodPressureDiabetes"
    when 
    	d : DiagnosisFact(d.name.equals("isBloodPressure"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isDiabetes")))
    then
    	insert (new DiagnosisFact("isDiabetes", questionCommunicator.createQuestion("Czy masz cukrzycę?")));
    end 
    
rule "MigraineDiabetes"
    when 
    	d : DiagnosisFact(d.name.equals("isMigraine"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isDiabetes")))
    then
    	insert (new DiagnosisFact("isDiabetes", questionCommunicator.createQuestion("Czy masz cukrzycę?")));
    end 
    
rule "DiabetesNeurologist"
    when d : DiagnosisFact(d.name.equals("isDiabetes"), d.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u neurologa");
        drools.halt();
    end
    
rule "NeuralgiaNeurologist"
    when d : DiagnosisFact(d.name.equals("isNeuralgia"), d.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u neurologa");
        drools.halt();
    end
    
rule "EyesightOneSidedHeadAche"
    when 
    	d : DiagnosisFact(d.name.equals("isEyesight"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isOneSidedHeadAche")))
    then
    	insert (new DiagnosisFact("isOneSideHeadAche", questionCommunicator.createQuestion("Czy miewasz jednostronne bóle głowy?")));
    end
    
rule "EyesightFogSight"
    when 
    	d : DiagnosisFact(d.name.equals("isEyesight"), d.status == Question.TRUE)
    	not (exists DiagnosisFact(name.equals("isFogSight")))
    then
    	insert (new DiagnosisFact("isFogSight", questionCommunicator.createQuestion("Czy widzisz jakby przez mgłę?")));
    end  

rule "FogSightOculist"
    when d : DiagnosisFact(d.name.equals("isFogSight"), d.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u okulisty");
        drools.halt();
    end
    
rule "OneSidedHeadAcheOculist"
    when d : DiagnosisFact(d.name.equals("isOneSidedHeadAche"), d.status == Question.TRUE)
    then
        questionCommunicator.createNoCallbackNotification("Zaleca się wizytę u okulisty");
        drools.halt();
    end

 
 rule "Answer"
	salience(-10)
	when 
	then
		questionCommunicator.createNoCallbackNotification("Podałeś za mało danych lub nie wiemy jak Ci pomóc :(");
	end

